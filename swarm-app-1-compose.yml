#Create Front-end and Back-end networks

docker network create -d overlay FE_NET
docker network create -d overlay BE_NET

#Vote service
# - bretfisher/examplevotingapp_vote
# - web front end for users to vote dog/cat
# - ideally published on TCP 80. Container listens on 80
# - on frontend network
# - 2+ replicas of this container

docker service create --name vote -p 80:80 --network FE_NET --replicas 2 bretfisher/examplevotingapp_vote

# - redis
#     - redis:3.2
#     - key/value storage for incoming votes
#     - no public ports
#     - on frontend network
#     - 1 replica NOTE VIDEO SAYS TWO BUT ONLY ONE NEEDED

docker service create --name redis --network FE_NET redis:3.2

# - worker
#     - bretfisher/examplevotingapp_worker:java
#     - backend processor of redis and storing results in postgres
#     - no public ports
#     - on frontend and backend networks
#     - 1 replica

docker service create --name worker --network FE_NET --network BE_NET bretfisher/examplevotingapp_worker:java

# - db
#     - postgres:9.4
#     - one named volume needed, pointing to /var/lib/postgresql/data
#     - on backend network
#     - 1 replica
#     - remember set env for password-less connections -e POSTGRES_HOST_AUTH_METHOD=trust

docker service create --name db --network BE_NET -e POSTGRES_PASSWORD=mypass -e POSTGRES_HOST_AUTH_METHOD=trust --mount type=volume,source=db-data,target=/var/lib/postgresql/data postgres:9.4

# - result
#     - bretfisher/examplevotingapp_result
#     - web app that shows results
#     - runs on high port since just for admins (lets imagine)
#     - so run on a high port of your choosing (I choose 5001), container listens on 80
#     - on backend network
#     - 1 replica

docker service create --name result -p 8090:80 --network BE_NET bretfisher/examplevotingapp_result 